sudo: required
dist: trusty
language: c
dist: trusty
compiler:
    #- clang
    - gcc
env:
    global:
        - TRAVIS_PAR_MAKE="-j 4"
        - SOS_GLOBAL_BUILD_OPTS="--enable-picky"
        - FCFLAGS="-fcray-pointer"
        #- PTL_IFACE_NAME=venet0
        - PTL_IFACE_NAME=lo
        ## Enabling FI logging may break UH testing harness
        #- FI_LOG_LEVEL=warn
        - SHMEM_OFI_USE_PROVIDER=sockets
        - SHMEM_INFO=1
        - SOS_ENABLE_ERROR_TESTS=0
        ## An encrypted value for INTEL_SERIAL_NUMBER:
        - secure: "luxfwDy26Pva+A58T/vPP7+Zek4rBEbpB2TpdXuLdIu/MJ2laoUkaZj/ouT6YgdSxUoiyLUlGIzLnByxnrVgWqYELsWHiV9hzsXZCNfgQDdUHV8UITCqSYVcd5WGNoVdC0QohKuIj47y6bP5ttcv1sIfpV74ztPJZE1dbb2QzgvWcIKWN8Abj55364ZnIidW7ErYLrAiKlBzSxZXCKiKD6qOUbpOBN8yuzaX9diXYJViest7iBC+BfwzXO8Shuouh6QrQhJ1T4oG6u6YJn17fnOwXKJCdkeQYr/E8ka4JRf8vZm7CNO1YdwNhtGtFNEzTJaP2XFLAQGCB9vffCxcqRbpWv+lpsFRsH+eiF/zp/xKGr5qzB9sPUxNANJyhphXK0VfIqDan7nz9di99NFBEF94Jl33E+KODTCAeHb6+a7yboR5B4BalM4jXKrcn/2A4pYrk45YF5IdLLOEvzTaOyVSgHoNIzXRZvHEL2AeYuvz5qLukzMB+QClbA1EeCBNyokuXK/TemeTvveXpQpCaVKNQ8zp/v30u8eiaV8R/dFa2evlJ6kwSaeXlXpXifeXd5Px0x6HF4FT9HLOtPVQ3rZXyfL2Eh92egu15GiTqMNkdVlVGUC20+iddLjtbPqRnVw0WnZkekh62A6rGuT4cTfAbZ2GVPD+IMqzokO1IGg="
    matrix:
        - SOS_BUILD_OPTS="--enable-pmi-simple"
        - SOS_BUILD_OPTS="--enable-ofi-mr=basic --enable-av-map --disable-cxx --enable-memcpy --enable-pmi-simple"

        - >
          SOS_DISABLE_FORTRAN=1
          SOS_BUILD_OPTS="--enable-pmi-mpi CC=mpicc"
        - >
          SOS_DISABLE_FORTRAN=1
          SOS_BUILD_OPTS="--disable-fortran --enable-error-checking --enable-remote-virtual-addressing --disable-aslr-check --enable-pmi-simple"
        - >
          SOS_ENABLE_ERROR_TESTS=1 SHMEM_SYMMETRIC_HEAP_USE_MALLOC=1
          SOS_BUILD_OPTS="--disable-threads --enable-error-checking --enable-pmi-simple"
        - >
          SOS_BUILD_OPTS="--with-cma --enable-error-checking --enable-profiling --enable-ofi-mr=basic --enable-av-map --enable-remote-virtual-addressing --enable-pmi-simple"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SHMEM_SYMMETRIC_HEAP_USE_HUGE_PAGES=1 SHMEM_BOUNCE_SIZE=0
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-pmi-simple --enable-ofi-fence"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SHMEM_BARRIER_ALGORITHM=auto SHMEM_BCAST_ALGORITHM=auto SHMEM_REDUCE_ALGORITHM=auto SHMEM_COLLECT_ALGORITHM=auto SHMEM_FCOLLECT_ALGORITHM=auto
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-thread-completion --enable-pmi-simple"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SHMEM_BARRIER_ALGORITHM=linear SHMEM_BCAST_ALGORITHM=linear SHMEM_REDUCE_ALGORITHM=linear SHMEM_COLLECT_ALGORITHM=linear SHMEM_FCOLLECT_ALGORITHM=linear
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-pmi-simple"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SHMEM_BARRIER_ALGORITHM=tree SHMEM_BCAST_ALGORITHM=tree SHMEM_REDUCE_ALGORITHM=tree
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-pmi-simple"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SHMEM_BARRIER_ALGORITHM=dissem SHMEM_REDUCE_ALGORITHM=recdbl SHMEM_FCOLLECT_ALGORITHM=recdbl
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-pmi-simple"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SHMEM_FCOLLECT_ALGORITHM=ring
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-pmi-simple"
          SHMEM_OFI_TX_POLL_LIMIT=1 SHMEM_OFI_RX_POLL_LIMIT=1
          SHMEM_OFI_STX_THRESHOLD=1024
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing --enable-pmi-simple"
          SHMEM_OFI_STX_MAX=8 SHMEM_OFI_STX_ALLOCATOR=random
        - >
          SOS_BUILD_OPTS="--enable-pmi-simple"
          SOS_CHECK_TARBALL_RPM=1
os:
    - linux

addons:
    apt:
        packages:
            - gfortran
            - rpm
            - mpich
            - libmpich-dev
            - cargo
            - libevent-dev
            - libhwloc-dev
before_install:
    ## Set up the environment
    - mkdir $HOME/travis
    - mkdir $HOME/travis/src
    - mkdir $HOME/travis/install
    - export SOS_SRC=$PWD
    - export TRAVIS_SRC=$HOME/travis/src
    - export TRAVIS_INSTALL=$HOME/travis/install
    ## Disable security protection so CMA will work
    - sudo sysctl -w kernel.yama.ptrace_scope=0
    - sudo sysctl -w kernel.randomize_va_space=0
    ## Run the icc installation script:
    - >
      if [ "$CC" = "icc" ]; then
          if [ "$TRAVIS_REPO_SLUG" = "Sandia-OpenSHMEM/SOS" -a \
               "$TRAVIS_PULL_REQUEST" = "false" ]; then
              ./scripts/travis/install-icc.sh --components icc,ifort
              source ~/.bashrc
              CC=icc
              CXX=icpc
              FC=ifort
              FCFLAGS=
              SOS_ENABLE_ERROR_TESTS=0
          else
              echo "Cannot test Intel compiler on a fork.  Exiting now."
              exit 0
          fi
      fi
    ## Build libev
    - cd $TRAVIS_SRC
    - wget http://dist.schmorp.de/libev/Attic/libev-4.22.tar.gz
    - tar -xzvf libev-4.22.tar.gz
    - cd libev-4.22
    - ./configure --prefix=$TRAVIS_INSTALL/libev
    - make install
    ## Build Portals 4
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/regrant/portals4.git portals4
    - cd portals4
    - ./autogen.sh
    - ./configure --prefix=$TRAVIS_INSTALL/portals4/ --with-ev=$TRAVIS_INSTALL/libev --enable-zero-mrs --enable-reliable-udp --disable-pmi-from-portals
    # JSD: --enable-transport-shmem removed; it was causing tests to hang
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Build libfabric
    - cd $TRAVIS_SRC
    - git clone -b v1.6.x --depth 10 https://github.com/ofiwg/libfabric.git libfabric
    - cd libfabric
    - ./autogen.sh
    - ./configure --prefix=$TRAVIS_INSTALL/libfabric
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Build Hydra
    - cd $TRAVIS_SRC
    - wget http://www.mpich.org/static/downloads/3.2/hydra-3.2.tar.gz
    - tar xvzf hydra-3.2.tar.gz
    - cd hydra-3.2/
    - ./configure --prefix=$TRAVIS_INSTALL/hydra
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Fetch UH Tests
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/openshmem-org/tests-uh.git tests-uh
    # Fetch Cray Tests
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/openshmem-org/tests-cray.git tests-cray
    # Fetch Mellanox Tests
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/openshmem-org/tests-mellanox.git tests-mellanox
    ## Fetch ISx
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ParRes/ISx.git ISx
    ## Fetch PRK
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ParRes/Kernels.git PRK
    - echo -e "SHMEMCC=oshcc -std=c99\nSHMEMTOP=$$TRAVIS_INSTALL\n" > PRK/common/make.defs
    ## Build PMIx
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/pmix/pmix pmix
    - cd pmix
    - ./autogen.pl
    - ./configure --prefix=$TRAVIS_INSTALL/pmix --with-platform=optimized
    - make install
    ## Build PRRTE
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/pmix/prrte prrte
    - cd prrte
    - ./autogen.pl
    - ./configure --prefix=$TRAVIS_INSTALL/prrte --with-pmix=$TRAVIS_INSTALL/pmix --without-slurm
    - make install

install:
    - cd $SOS_SRC
    - ./autogen.sh

script:
    - export BASE_PATH=$PATH
    ###
    ### Build and check with PMIx
    ###
    - cd $SOS_SRC
    - mkdir pmix-build
    - cd pmix-build
    - export PATH=$TRAVIS_INSTALL/prrte/bin:$BASE_PATH
    - ../configure --prefix=$PWD/install --with-ofi=$TRAVIS_INSTALL/libfabric --with-pmix=$TRAVIS_INSTALL/pmix
    - make $TRAVIS_PAR_MAKE
    - make $TRAVIS_PAR_MAKE check TESTS=
    - prte --daemonize
    - make VERBOSE=1 TEST_RUNNER="prun -host localhost -oversubscribe -np 2" check
    - prun -terminate
    - make install

    ###
    ### Tarball and RPM build check
    ###
    - >
      if [ ! -z "$SOS_CHECK_TARBALL_RPM" ]; then
          cd $SOS_SRC
          ./configure --with-ofi=$TRAVIS_INSTALL/libfabric/ --enable-pmi-simple --enable-rpm-prefix
          make dist
          rpmbuild -ta ./sandia-openshmem-*.tar.gz --define "configargs --with-ofi=$TRAVIS_INSTALL/libfabric/ --enable-pmi-simple" --define "_prefix /usr/shmem"
          make clean
          ./configure --with-ofi=$TRAVIS_INSTALL/libfabric/ --enable-pmi-simple
          make dist
          rpmbuild -ta ./sandia-openshmem-*.tar.gz --define "configargs --with-ofi=$TRAVIS_INSTALL/libfabric/ --enable-pmi-simple"
          # Sanity check distribution tarball
          tar zxvf sandia-openshmem-*.tar.gz
          cd sandia-openshmem-*
          ./autogen.sh
          mkdir build
          cd build
          ../configure --with-ofi=$TRAVIS_INSTALL/libfabric/ $SOS_GLOBAL_BUILD_OPTS $SOS_BUILD_OPTS
          make $TRAVIS_PAR_MAKE check TESTS=
          make VERBOSE=1 TEST_RUNNER="mpiexec.hydra -np 2" check
      fi
after_script:
    - >
      if [ "$CC" = "icc" ]; then
        '[[ ! -z "${INTEL_INSTALL_PATH}" ]] && uninstall_intel_software'
      fi
